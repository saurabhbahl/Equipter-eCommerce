version: "3.9"

services:
  client:
    container_name: frontend-react
    restart: always
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    environment:
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./client:/app
      # - ./client/node_modules:/app/node_modules
    depends_on:
      - server
    networks:
      - equipter
    entrypoint: sh -c "npm install && npm run dev"

  server:
    container_name: express-server
    restart: always
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "${PORT}:3000"
    env_file:
      - ./server/.env
    volumes:
      - ./server:/app
      # - /app/server.sh
      # - ./server/node_modules:/app/node_modules
    depends_on:
      - db
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - equipter
    extra_hosts:
      - "host.docker.internal:host-gateway"

  db:
    container_name: postgres-database
    restart: always
    image: postgres:13
   
    env_file:
      - ./server/.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 15s
      retries: 5
    networks:
      - equipter
   
   
  pgadmin:
    container_name: pgadmin
    restart: always
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_DEFAULT_PORT: ${PGADMIN_DEFAULT_PORT}
    ports:
      - "8001:80"
    depends_on:
      - db
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - equipter

volumes:
  postgres-data:
  pgadmin-data:

networks:
  equipter:
    driver: bridge
